include:
  - compose.monitoring.yaml

services:
  db:
    image: postgres:13
    restart: always
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: {{ env_vars.POSTGRES_PASSWORD }}
      POSTGRES_USER: deltron
      POSTGRES_DB: deltron
    volumes:
      - postgres_vol:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deltron -d deltron"]
      interval: 10s
      retries: 15
    networks:
      - backend_network

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8081:8080
    networks:
      - backend_network
    depends_on:
      - db

  backend:
    image: deltronfr/monitoring-backend-repo:v1.1
    container_name: backend
    depends_on:
      - db
    env_file: .env
    ports:
      - 8000:8000
    networks:
      - backend_network
      - frontend_network

  frontend:
    image: deltronfr/monitoring-frontend-repo:v1.1
    container_name: frontend
    expose:
      - "5173"
    env_file: .env
    depends_on:
      - backend
    networks:
      - frontend_network
      - backend_network
  
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
      - cadvisor
      - adminer
      - prometheus
      - grafana
      - certbot
    networks:
      - monitoring_network
      - frontend_network
      - backend_network


  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    entrypoint: ["/bin/sh", "-c", "certbot renew --standalone --quiet && sleep 12h & wait"]
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    restart: unless-stopped

    networks:
      - monitoring_network
      - frontend_network
      - backend_network

volumes:
  postgres_vol:
  data:
  letsencrypt:

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge
  monitoring_network:
    driver: bridge


